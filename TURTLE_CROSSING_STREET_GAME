 1
#We have main.py, Claas Player, and class CarManager
#The create object player created from turtle class which will inherit everything from turtle 
#main.py
import time
from turtle import Screen
from player import Player
from car_manager import CarManager
from scoreboard import  Scoreboard


screen = Screen()

screen.setup(width=600, height=600)
screen.title("Traffic In Schiedam City")
screen.tracer(0)


player = Player()


game_is_on = True
while game_is_on:
    time.sleep(0.1)
    screen.update()

screen.exitonclick()

------------------------------------------------------------------------------
#self made class Player which will inherit everything from turtle Class, this will create turtle positioned
#at the 90 degree facing north
#player.py

from turtle import  Turtle

STARTING_POSITION = (0, -280)
MOVE_DISTANCE = 10
FINISH_LINE_Y = 280

class Player(Turtle):
    def __init__(self):
        super().__init__()
        self.shape("turtle")
        self.penup()
        self.goto(STARTING_POSITION)     #we can call the function self.go_to_start() 
        self.setheading(90)
*****************************************************************************************************************************
2
-----------------------------------------------------------------------------------------------------------
main.py
#Getting the turtle move upwards or towardsnorth
#define function under screen.listen() function 

screen.onkey(player.go_up, "Up")

--------------------------------------------------------------------------------------------------------
# the function below will move the turtle north
#player.py
    def go_up(self):
        self.forward(MOVE_DISTANCE)
----------------------------------------------------------------------------------------------------------
******************************************************************************************************************************************
3
-------------------------------------------------------------------------------------------------------------------------------
#creating the car every 0.1 second 
#car_manager.py

from turtle import Turtle
import random
COLORS = ["black", "red", "orange", "yellow", "green", "blue", ]
STARTING_MOVE_DISTANCE = 5
MOVE_INCREMENT = 10


class CarManager:
    def __init__(self):
        self.all_cars = []

    def create_car(self):
        new_car = Turtle("square")
        new_car.shapesize(stretch_wid=1, stretch_len=2)
        new_car.penup()
        new_car.color(random.choice(COLORS))
        random_y = random.randint(-250, 250)
        new_car.goto(300, random_y)
        self.all_cars.append(new_car)
--------------------------------------------------------------------------------------------------------------------------------------
# creating the car object [car_manager = CarManager()] and calling the car function from CarManager class [car_manager.create_car()] in while loop
#main.py

player = Player()
car_manager = CarManager()
screen.listen()
screen.onkey(player.go_up, "Up")

game_is_on = True
while game_is_on:
    time.sleep(0.1)
    screen.update()
    car_manager.create_car()

screen.exitonclick()
------------------------------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************************
4
---------------------------------------------------------------------------------------------
#car_manager.py
To move the car, write the function in car_manager, the cars are the right side of X-Axis so it can only move backwards to the left, therfore
#car.backward(STARTING_MOVE_DISTANCE) Using the contants values already given

    def move_cars(self):
        for car in self.all_cars:
            car.backward(STARTING_MOVE_DISTANCE)

---------------------------------------------------------------------------------------------------
main.py
#To move the cars from left to right of the screen, [call car_manager.move_cars()] the function in while loop 

game_is_on = True
while game_is_on:
    time.sleep(0.1)
    screen.update()
    car_manager.create_car()

    car_manager.move_cars()  # call move_cars()

screen.exitonclick()
*************************************************************************************************************************************
5
---------------------------------------------------------
car_manager.py
#There are many cars being generated every (0.1) seconds which will make it impposible for turtle to cross. To slow it down
# you need the following code in inserted in creat_car method as one of  its fields 
--------------------------------------
#random_chance = random.randint(1, 6)  
        #if random_chance == 1:
-------------------------------------

    def create_car(self):
        random_chance = random.randint(1, 6)  
        if random_chance == 1:
            new_car = Turtle("square")
            new_car.shapesize(stretch_wid=1, stretch_len=2)
            new_car.penup()
            new_car.color(random.choice(COLORS))
            random_y = random.randint(-250, 250)
            new_car.goto(300, random_y)
            self.all_cars.append(new_car)   

----------------------------------------------------------------------------------------------------------------------------------------
***************************************************************************************************************************************
6
--------------------------------
main.py
#Detect collision of player (our tutle) with car ðŸš˜, write the this code in main.py under while loop where you called those functions

 # Detect collision with car
    for car in car_manager.all_cars:
        if car.distance(player) < 20:
            game_is_on = False

------------------------------------------------------------------------------------------------------------------------------------
**************************************************************************************************************************************
7
-----------------------------------------------------------------------------------------------------------------------------------
#player.py
#Successful crossing, the two fuctions below are the codes [FINISH_LINE_Y = 280] and [STARTING_POSITION = (0, -280)] 
is contant already initialised, call this fuction in main.py

     def go_to_start(self):
        self.goto(STARTING_POSITION)

    def is_at_finish_line(self):
        if self.ycor() > FINISH_LINE_Y:
            return True
        else:
            return False
----------------------------------------------------------------------------------------------------------------------------------------
#main.py
#write this conditional stateent in while loop

 if player.is_at_finish_line():
        player.go_to_start()

*********************************************************************************************************
8
------------------------------------------------------------------------------------------------
#car_manager.py
Increase the speed after any successful crossing add the follwing to car_manager attribute[ self.car_speed = STARTING_MOVE_DISTANCE]
#Now inside the [move_cars] function, we can chanage the parameter as [self.car_speed]

--------------------------------------------------------------
class CarManager:
    def __init__(self):
        self.all_cars = []
        self.car_speed = STARTING_MOVE_DISTANCE
--------------------------------------------------------------
#car_manager.py
#call the method in main under [go_to_start and is_at_finish_line] function 

    def level_up(self):
        self.car_speed += 10

---------------------------------------------------
#main.py
# call the function here 
car_manager.level_up()
*********************************************************************************************
9
------------------------------------------------------------------------------
#scoreboard.py
#to write the score of every crossing
from turtle import Turtle
FONT = ("Courier", 24, "normal")


class Scoreboard(Turtle):
    def __init__(self):
        super().__init__()
        self.level = 1
        self.hideturtle()
        self.penup()
        self.goto(-280, 250)
        self.update_scoreboard()

    def update_scoreboard(self):
        self.clear()
        self.write(f"Level: {self.level}", align="Left", font=FONT)

    def increase_level(self):
        self.level += 1
        self.update_scoreboard()

----------------------------------------------------------------------------------------------------------------
#main.py
#create your new scoreboard object from [scoreborad= Scoreboard()] class

scoreboard = Scoreboard()
# Detect collision with car
    for car in car_manager.all_cars:
        if car.distance(player) < 20:
            game_is_on = False
            scoreboard.game_over()   

