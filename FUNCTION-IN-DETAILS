A function is a set of statements that take inputs, do some specific computation and produces output. The idea is to put some commonly
or repeatedly done task together and make a function, so that instead of writing the same code again and again for different inputs, we can call the function.
Python provides built-in functions like print(), etc. but we can also create your own functions. These functions are called user-defined functions.

# A simple Python function to check 
# whether x is even or odd 
def evenOdd( x ): 
   if (x % 2 == 0): 
    print "even"
    else: 
   print "odd"

# Driver code 
evenOdd(2) 
evenOdd(3) 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Pass by Reference or pass by value?
# Here x is a new reference to same list lst 
def myFun(x): 
   x[0] = 20

# Driver Code (Note that lst is modified 
# after function call. 
lst = [10, 11, 12, 13, 14, 15] 
myFun(lst); 
print(lst) 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def myFun(x): 

# After below line link of x with previous 
# object gets broken. A new object is assigned 
# to x. 
x = [20, 30, 40] 

# Driver Code (Note that lst is not modified 
# after function call. 
lst = [10, 11, 12, 13, 14, 15] 
myFun(lst); 
print(lst) 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def myFun(x): 

# After below line link of x with previous 
# object gets broken. A new object is assigned 
# to x. 
  x = 20

# Driver Code (Note that lst is not modified 
# after function call. 
x = 10
myFun(x); 
print(x)  
           Output:10
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def swap(x, y): 
    temp = x; 
    x = y; 
    y = temp; 

# Driver code 
x = 2
y = 3
swap(x, y) 
print(x) 
print(y) 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Default arguments:
#A default argument is a parameter that assumes a default value if a value is not provided in the function call for that argument.
#The following example illustrates Default arguments. Python program to demonstrate  default arguments 

def myFun(x, y=50): 
	print("x: ", x) 
	print("y: ", y) 

# Driver code (We call myFun() with only 
# argument) 
myFun(10) 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Keyword arguments:
The idea is to allow caller to specify argument name with values so that caller does not need to remember order of parameters.
# Python program to demonstrate Keyword Arguments 
def student(firstname, lastname): 
	print(firstname, lastname) 
	
	
# Keyword arguments				 
student(firstname ='Geeks', lastname ='Practice')	 
student(lastname ='Jinko', firstname ='Elias') 


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
We can have both normal and keyword variable number of arguments. Please see this for details https://www.geeksforgeeks.org/args-kwargs-python/

# Python program to illustrate 
# *args for variable number of arguments 
def myFun(*argv): 
	for arg in argv: 
		print (arg) 
	
myFun('Hello', 'Welcome', 'to', 'GeeksforGeeks') 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Anonymous functions: In Python, anonymous function means that a function is without a name. As we already know that def keyword 
is used to define the normal functions and the lambda keyword is used to create anonymous functions.

# Python code to illustrate cube of a number 
# using labmda function 
	
cube = lambda x: x*x*x 
print(cube(7)) 

################################################################################################################################################################################
#Functions with output
def format_name(f_name, l_name):
  
  formated_f_name=f_name.title()
  formated_l_name=l_name.title()

  print(f"{formated_f_name}  {formated_l_name}")

format_name("elias","jinko")
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#instead of printing we can return it as well
#Functions with output
def format_name(f_name, l_name):
  
  formated_f_name=f_name.title()
  formated_l_name=l_name.title()

  return f"{formated_f_name}  {formated_l_name}"
  
format_string=format_name("Elias" , "jinko")
print(format_string)
   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
#printing format staright from the print function works as well

def format_name(f_name, l_name):
  
  formated_f_name=f_name.title()
  formated_l_name=l_name.title()

  return f"{formated_f_name}  {formated_l_name}"

print(format_name("Elias" , "jinko"))   
   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Challenge

def is_leap(year):
  if year % 4 == 0:
    if year % 100 == 0:
      if year % 400 == 0:
        return True
      else:
        return False
    else:
        return True
  else:
    return False
    
def days_in_month(year, month):
  month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
  if month > 12 or month < 1:
    return "Invalid month entered."
  if month == 2 and is_leap(year):
    return 29
  return month_days[month - 1]



#Do NOT change any of the code below ðŸ‘‡
year = int(input("Enter a year: "))
month = int(input("Enter a month: "))
days = days_in_month(year, month)
print(days)

------------------------------------------------------------------------------------------------------------------------------------------------------------------
