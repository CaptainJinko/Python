#Function

def myFunction():
  print("Hello")
  print("Bye")

myFunction()  

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#reeborg.ca  editor 
def turn_right():
    turn_left()
    turn_left()
    turn_left()
    
 
turn_left()
move()
turn_right()
move()
turn_right()
move()
turn_right()
move()


# Without function it would been like the code
#below
turn_left()
move()
turn_left()
turn_left()
turn_left()
move()
turn_left()
turn_left()
turn_left()
move()
turn_left()
turn_left()
turn_left()
move()

---------------------------------------------------------------------
def turn_right():
    turn_left()
    turn_left()
    turn_left()
    

def jump(): 
    move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()
    
jump() 
jump()
jump()
jump()
jump()
jump()

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def turn_right():
    turn_left()
    turn_left()
    turn_left()
    

def jump(): 
    move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()
    
for step in range(6):
     jump()
------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Challenge using Reeborg's worlds editor hurdle 2

def turn_right():
    turn_left()
    turn_left()
    turn_left()
 
def jump():
    move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()

number_of_hurdles=6
while number_of_hurdles >0:
      jump()
      number_of_hurdles-=1
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Challenge using Reeborg's worlds editor hurdle 2

def turn_right():
    turn_left()
    turn_left()
    turn_left()
 
def jump():
    move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()

while not at_goal():
      jump()
      
  -----------------------------------------------------------------------------------------------------------------------------------------------------------------
 #Challenge hurdle 2
 def turn_right():
    turn_left()
    turn_left()
    turn_left()
 
def jump():
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()
    
while not at_goal():
    if wall_in_front():
        jump()
    else:
        move()
        
  ------------------------------------------------------------------------------------------------------------------------------------------------------------------
  #Challenge hurdle 3
  def turn_right():
    turn_left()
    turn_left()
    turn_left()
 
def jump():
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()
    
while not at_goal():
     if not front_is_clear():
        jump()
     else:
         move()
          
  ---------------------------------------------------------------------------------------------------------------------------------------------------------
 #Challenge hurdle 4
 def turn_right():
    turn_left()
    turn_left()
    turn_left()
 
def jump():
    turn_left()
    while wall_on_right():
        move()
    turn_right()
    move()
    turn_right()
    while front_is_clear():
        move()
    turn_left()
    
while not at_goal():
    if wall_in_front():
        jump()
    else:
        move()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#when you fiished with day 15 come back and learn th debuging the robot maze
#Maze Challenge 

def    turn_right():
       turn_left()
       turn_left()
       turn_left()


while not at_goal():
     
    if not wall_in_front():
        move()
        turn_left()
      
    elif wall_on_right():
         turn_right() 
    elif not front_is_clear:
        turn_left()
    else: 
        turn_right()
         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
def    turn_right():
       turn_left()
       turn_left()
       turn_left()


while not at_goal():
     
     if right_is_clear():
        turn_right()
        move()
     elif front_is_clear():
        move()
     else:
        turn_left()
        
