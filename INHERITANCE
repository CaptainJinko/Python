class Animal:
    def __init__(self):
        self.number_of_eyes = 2

    def breathe(self):
        print("Inhale , Exhale")


my_animal = Animal()
my_animal.breathe()
print(my_animal.number_of_eyes)

print("*************")


class Fish(Animal):
    def swim(self):
        print("moving in water")


my_fish = Fish()
my_fish.breathe()
my_fish.swim()
print(my_fish.number_of_eyes)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Animal:
    def __init__(self):
        self.num_eyes = 2

    def breathe(self):
        print("Inhale, Exhale.")


class Fish(Animal):

    def __init__(self):
        super().__init__()

    def swim(self):
        print("moving in watter .")


nemo = Fish()
nemo.swim()
nemo.breathe()
print(nemo.num_eyes)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Animal:
    def __init__(self):
        self.num_eyes = 2

    def breathe(self):
        print("Inhale, Exhale.")


class Fish(Animal):

    def __init__(self):
        super().__init__()

    def breathe(self):
        super().breathe()
        print("doing this under water")

    def swim(self):
        print("moving in watter .")


nemo = Fish()
nemo.swim()
nemo.breathe()
print(nemo.num_eyes)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Animal:
    def __init__(self):
        self.eyes = 2

    def breathe(self):
        print("Inhale and exhale")

    def fishermen(self):
        print("We have fish farmers all over")


class Fish(Animal):
    def __init__(self):
        super(Fish, self).__init__()

    def breathe(self):
        super(Fish, self).breathe()
        print("Doing this under water ")

    def fishermen(self):
        super(Fish, self).fishermen()
        print("We  fish here as a hobby not business")

    def swim(self):
        print("moving in water")


memo = Fish()
memo.breathe()
memo.swim()
memo.fishermen()
print(memo.eyes)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Python Inheritance
#Inheritance allows us to define a class that inherits all the methods and properties from another class.
#Parent class is the class being inherited from, also called base class.
#Child class is the class that inherits from another class, also called derived class.

#Create a Parent Class
#Example
#Create a class named Person, with firstname and lastname properties, and a printname method:

class Person:
    def __init__(self, fname, lname):
        self.fname = fname
        self.lname = lname

    def print_name(self):
        print(self.fname, self.lname)


my_name = Person("Elias Adam ", "Jinko")
my_name.print_name()
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#Now the Student class has the same properties and methods as the Person class.

class Person:
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name

    def print_name(self):
        print(self.first_name, self.last_name)


# Use the Person class to create an object, and then execute the printname method:
my_name = Person("Elias", "Jinko")
my_name.print_name()

print("****")

class Student(Person):
    pass


my_student_name = Student("ZamQras", "Jinko")
my_student_name.print_name()

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

#We want to add the __init__() function to the child class (instead of the pass keyword).
#Note: The __init__() function is called automatically every time the class is being used to create a new object.

When you add the __init__() function, the child class will no longer inherit the parent's __init__() function.
Note: The child's __init__() function overrides the inheritance of the parent's __init__() function.
To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function:
Example

class Person:
    def __init__(self, first_name, last_name):
        self.first_name = first_name
        self.last_name = last_name

    def print_name(self):
        print(self.first_name, self.last_name)


# Use the Person class to create an object, and then execute the printname method:
my_name = Person("Elias", "Jinko")
my_name.print_name()

print("****")


class Student(Person):
    def __init__(self, fname, lastname):
        Person.__init__(self, fname, lastname)


my_student_name = Student("ZamQras", "Jinko")
my_student_name.print_name()

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#main.py
from turtle import Screen
from snake import Snake
from food import Food
from scoreboard import Scoreboard
import time

Screen().setup(width=600, height=600)
Screen().title("My Snake Game")
Screen().bgcolor("black")
Screen().tracer(0)

screen = Screen()
snake = Snake()
scoreboard = Scoreboard()
food = Food()
Screen().listen()

screen.onkey(snake.up, "Up")
screen.onkey(snake.down, "Down")
screen.onkey(snake.left, "Left")
screen.onkey(snake.right, "Right")

is_game_on = True
while is_game_on:
    screen.update()
    time.sleep(0.1)
    snake.move()

    if snake.head.distance(food) < 15:
        food.refresh()
        scoreboard.increase_score()
screen.exitonclick()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#snake.py

from turtle import Turtle, Screen

STARTING_POSITIONS = [(0, 0), (-20, 0), (-40, 0)]
MOVE_DISTANCE = 20
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0


class Snake:
    def __init__(self):
        self.segments = []
        self.create_snake()
        self.head = self.segments[0]

    def create_snake(self):
        for seg_number in STARTING_POSITIONS:
            new_segments = Turtle("square")
            new_segments.color("white")
            new_segments.penup()
            new_segments.goto(seg_number)
            self.segments.append(new_segments)

    def move(self):
        for snake_index in range(len(self.segments) - 1, 0, -1):
            new_x = self.segments[snake_index - 1].xcor()
            new_y = self.segments[snake_index - 1].ycor()
            self.segments[snake_index].goto(new_x, new_y)
        self.segments[0].forward(MOVE_DISTANCE)

    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(90)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(270)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(180)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(0)
            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#food.py

from turtle import Turtle
import random


class Food(Turtle):
    def __init__(self):
        super(Food, self).__init__()
        self.shape("circle")
        self.penup()
        self.shapesize(stretch_wid=0.5, stretch_len=0.5)
        self.color("blue")
        self.speed("fastest")

    def refresh(self):
        random_x = random.randint(-280, 280)
        random_y = random.randint(-280, 280)
        self.goto(random_x, random_y)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#scoreboard
from turtle import Turtle


class Scoreboard(Turtle):
    def __init__(self):
        super(Scoreboard, self).__init__()
        self.score = 0
        self.color("white")
        self.penup()
        self.goto(x=0, y=270)
        self.hideturtle()
        self.update_scoreboard()

    def update_scoreboard(self):
        self.write(f"Score: {self.score} ", align="center", font=("Arial ", 24, "normal"))

    def increase_score(self):
        self.score += 1
        self.clear()
        self.update_scoreboard()
