How to search for python solution: type your quiries in googgle and then at the end type stack overflow. you will get exact answer .  

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Setting up the screen for the snake game 
from turtle import Screen, Turtle

screen = Screen()
screen.setup(width=600, height=600)

screen.bgcolor("black")
screen.title("My Snake Game")


screen.exitonclick()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
from turtle import Screen, Turtle

x_positions = [(0, 0), (-20, 0), (-40, 0), (-60, 0)]
screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor("black")
screen.title("My Snake Game")

segment1 = Turtle("square")
segment1.color("white")

segment2 = Turtle("square")
segment2.color("white")
segment2.goto(-20, 0)

segment3 = Turtle("square")
segment3.color("white")
segment3.goto(-40, 0)


screen.exitonclick()

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

from turtle import Screen, Turtle

x_positions = [(0, 0), (-20, 0), (-40, 0), (-60, 0)]
screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor("black")
screen.title("My Snake Game")

for snake_line in range(0, 3):
    snake = Turtle("square")
    snake.color("white")
    snake.goto(x=x_positions[snake_line])

screen.exitonclick()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Best approach

from turtle import Screen, Turtle

screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor("black")
screen.title("My Snake Game")

starting_positions = [(0, 0), (-20, 0), (-40, 0)]

for position in starting_positions:
    new_segment = Turtle("square")
    new_segment.color("white")
    new_segment.goto(position)



screen.exitonclick()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Create a segment as empty list [] and append it to the new_segment

starting_positions = [(0, 0), (-20, 0), (-40, 0)]
segments = []
for position in starting_positions:
    new_segment = Turtle("square")
    new_segment.color("white")
    new_segment.goto(position)
    segments.append(new_segment)


screen.exitonclick()

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#if we want somenthing to continue in our program, the way to do it is using a  while loop

starting_positions = [(0, 0), (-20, 0), (-40, 0)]
segments = []
for position in starting_positions:
    new_segment = Turtle("square")
    new_segment.color("white")
    new_segment.penup()
    new_segment.goto(position)
    segments.append(new_segment)
game_is_on = True
while game_is_on:
    for seg in segments:
        seg.forward(20)

screen.exitonclick()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
#To get our snake moving and later get the whole to be turning at onedirection we need the start from the code below, take note of the following: tarcer, update, sleep
from turtle import Screen, Turtle
import time

screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor("black")
screen.title("My Snake Game")

screen.tracer(0)

starting_positions = [(0, 0), (-20, 0), (-40, 0)]
segments = []
for position in starting_positions:
    new_segment = Turtle("square")
    new_segment.color("white")
    new_segment.penup()
    new_segment.goto(position)
    segments.append(new_segment)

game_is_on = True
while game_is_on:
    screen.update()
    time.sleep(0.1)

    for seg_num in range(len(segments) - 1, 0, -1):
        new_x = segments[seg_num - 1].xcor()
        new_y = segments[seg_num - 1].ycor()
        segments[seg_num].goto(new_x, new_y)

    segments[0].forward(20)
     
screen.exitonclick()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Create a snake class and move to OOP
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
#main.py one
from turtle import Turtle, Screen
from snake import Snake
import time

screen = Screen()
Screen().setup(width=600, height=600)
Screen().title("My Snake Game")
Screen().bgcolor("black")
screen.tracer(0)

snake = Snake()

is_game_on = True
while is_game_on:
    screen.update()
    time.sleep(0.1)

    snake.move()
screen.exitonclick()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#main.py2
#continution of main.py file by listeners of the key to bind the key to the movement 

screen = Screen()
Screen().setup(width=600, height=600)
Screen().title("My Snake Game")
Screen().bgcolor("black")
screen.tracer(0)

snake = Snake()

screen.listen()
screen.onkey(snake.up, "Up")
screen.onkey(snake.down, "Down")
screen.onkey(snake.left, "Left")
screen.onkey(snake.right, "Right")

is_game_on = True
while is_game_on:
    screen.update()
    time.sleep(0.1)

    snake.move()
screen.exitonclick()

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#Snake1
#snake.py
#Create a snake class and move to OOP

from turtle import Turtle

STARTING_POSITION = [(0, 0), (-20, 0), (-40, 0)]
MOVE_DISTANCE = 20


class Snake:

    def __init__(self):
        self.segments = []
        self.create_snake()

    def create_snake(self):

        for seg_index in STARTING_POSITION:
            new_segment = Turtle("square")
            new_segment.color("white")
            new_segment.penup()
            new_segment.goto(seg_index)
            self.segments.append(new_segment)

    def move(self):
        for seg_num in range(len(self.segments) - 1, 0, -1):
            new_x = self.segments[seg_num - 1].xcor()
            new_y = self.segments[seg_num - 1].ycor()
            self.segments[seg_num].goto(new_x, new_y)
        self.segments[0].forward(MOVE_DISTANCE)
        
 -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#snake.py
#Snake2 continuesio of snake file , creating ,methods in snake to fetermines the direction of of movement by 
 def up(self):
        self.segments[0].setheading(90)

    def down(self):
        self.segments[0].setheading(270)

    def left(self):
        self.segments[0].setheading(180)

    def right(self):
        self.segments[0].setheading(0
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#main.py two
from turtle import Turtle, Screen
from snake import Snake
import time

Screen().setup(width=600, height=600)
Screen().title("My Snake Game")
Screen().bgcolor("black")
Screen().tracer(0)

screen = Screen()
snake = Snake()
Screen().listen()

screen.onkey(snake.up, "Up")
screen.onkey(snake.down, "Down")
screen.onkey(snake.left, "Left")
screen.onkey(snake.right, "Right")

is_game_on = True
while is_game_on:
    screen.update()
    time.sleep(0.1)
    snake.move()

screen.exitonclick()
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
snake.py Two

from turtle import Turtle, Screen

MOVE_DISTANCE = 20
STARTING_POSITION = [(0, 0), (-20, 0), (-40, 0)]
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0


class Snake:
    def __init__(self):
        self.segment = []
        self.create_snake()
        self.head = self.segment[0]

    def create_snake(self):
        for seg_index in STARTING_POSITION:
            new_segment = Turtle("square")
            new_segment.color("white")
            new_segment.penup()
            new_segment.goto(seg_index)
            self.segment.append(new_segment)

    def move(self):
        for snake_num in range(len(self.segment) - 1, 0, -1):
            new_x = self.segment[snake_num - 1].xcor()
            new_y = self.segment[snake_num - 1].ycor()
            self.segment[snake_num].goto(new_x, new_y)
        self.segment[0].forward(MOVE_DISTANCE)

    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(90)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(270)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(180)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(0)
            
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------           
from turtle import Turtle, Screen

MOVE_DISTANCE = 20
STARTING_POSITION = [(0, 0), (-20, 0), (-40, 0)]
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0


class Snake:
    def __init__(self):
        self.segment = []
        self.create_snake()
        self.head = self.segment[0]

    def create_snake(self):
        for seg_index in STARTING_POSITION:
            new_segment = Turtle("square")
            new_segment.color("white")
            new_segment.penup()
            new_segment.goto(seg_index)
            self.segment.append(new_segment)

    def move(self):
        for snake_num in range(len(self.segment) - 1, 0, -1):
            new_x = self.segment[snake_num - 1].xcor()
            new_y = self.segment[snake_num - 1].ycor()
            self.segment[snake_num].goto(new_x, new_y)
        self.segment[0].forward(MOVE_DISTANCE)

    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(90)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(270)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(180)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(0)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------            
from turtle import Turtle, Screen

MOVE_DISTANCE = 20
STARTING_POSITION = [(0, 0), (-20, 0), (-40, 0)]
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0


class Snake:
    def __init__(self):
        self.segment = []
        self.create_snake()
        self.head = self.segment[0]

    def create_snake(self):
        for seg_index in STARTING_POSITION:
            new_segment = Turtle("square")
            new_segment.color("white")
            new_segment.penup()
            new_segment.goto(seg_index)
            self.segment.append(new_segment)

    def move(self):
        for snake_num in range(len(self.segment) - 1, 0, -1):
            new_x = self.segment[snake_num - 1].xcor()
            new_y = self.segment[snake_num - 1].ycor()
            self.segment[snake_num].goto(new_x, new_y)
        self.segment[0].forward(MOVE_DISTANCE)

    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(90)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(270)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(180)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(0)
from turtle import Turtle, Screen

MOVE_DISTANCE = 20
STARTING_POSITION = [(0, 0), (-20, 0), (-40, 0)]
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0


class Snake:
    def __init__(self):
        self.segment = []
        self.create_snake()
        self.head = self.segment[0]

    def create_snake(self):
        for seg_index in STARTING_POSITION:
            new_segment = Turtle("square")
            new_segment.color("white")
            new_segment.penup()
            new_segment.goto(seg_index)
            self.segment.append(new_segment)

    def move(self):
        for snake_num in range(len(self.segment) - 1, 0, -1):
            new_x = self.segment[snake_num - 1].xcor()
            new_y = self.segment[snake_num - 1].ycor()
            self.segment[snake_num].goto(new_x, new_y)
        self.segment[0].forward(MOVE_DISTANCE)

    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(90)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(270)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(180)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(0)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
from turtle import Turtle, Screen

MOVE_DISTANCE = 20
STARTING_POSITION = [(0, 0), (-20, 0), (-40, 0)]
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0


class Snake:
    def __init__(self):
        self.segment = []
        self.create_snake()
        self.head = self.segment[0]

    def create_snake(self):
        for seg_index in STARTING_POSITION:
            new_segment = Turtle("square")
            new_segment.color("white")
            new_segment.penup()
            new_segment.goto(seg_index)
            self.segment.append(new_segment)

    def move(self):
        for snake_num in range(len(self.segment) - 1, 0, -1):
            new_x = self.segment[snake_num - 1].xcor()
            new_y = self.segment[snake_num - 1].ycor()
            self.segment[snake_num].goto(new_x, new_y)
        self.segment[0].forward(MOVE_DISTANCE)

    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(90)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(270)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(180)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(0)
from turtle import Turtle, Screen

MOVE_DISTANCE = 20
STARTING_POSITION = [(0, 0), (-20, 0), (-40, 0)]
UP = 90
DOWN = 270
LEFT = 180
RIGHT = 0


class Snake:
    def __init__(self):
        self.segment = []
        self.create_snake()
        self.head = self.segment[0]

    def create_snake(self):
        for seg_index in STARTING_POSITION:
            new_segment = Turtle("square")
            new_segment.color("white")
            new_segment.penup()
            new_segment.goto(seg_index)
            self.segment.append(new_segment)

    def move(self):
        for snake_num in range(len(self.segment) - 1, 0, -1):
            new_x = self.segment[snake_num - 1].xcor()
            new_y = self.segment[snake_num - 1].ycor()
            self.segment[snake_num].goto(new_x, new_y)
        self.segment[0].forward(MOVE_DISTANCE)

    def up(self):
        if self.head.heading() != DOWN:
            self.head.setheading(90)

    def down(self):
        if self.head.heading() != UP:
            self.head.setheading(270)

    def left(self):
        if self.head.heading() != RIGHT:
            self.head.setheading(180)

    def right(self):
        if self.head.heading() != LEFT:
            self.head.setheading(0)



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@





